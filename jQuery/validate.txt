jquery validator addMethod 方法的使用

(2013-04-01 08:32:25)
转载▼
jQuery.validate是一款非常不错的表单验证工具，简单易上手，而且能达到很好的体验效果，虽然说在项目中早已用过，但看到这篇文章写得还是不错的，转载下与大家共同分享。
一、用前必备
官方网站：http://bassistance.de/jquery-plugins/jquery-plugin-validation/（注意下载最新版）
API: http://jquery.bassistance.de/api-browser/plugins.html当前版本：1.5.5
需要JQuery版本：1.2.6+, 兼容 1.3.2<script src="../js/jquery.js" type="text/javascript"></script>
< script src="../js/jquery.validate.js" type="text/javascript"></script>
二、默认校验规则
(1)required:true 必输字段
(2)remote:"check.php" 使用ajax方法调用check.php验证输入值
(3)email:true 必须输入正确格式的电子邮件
(4)url:true 必须输入正确格式的网址
(5)date:true 必须输入正确格式的日期
(6)dateISO:true 必须输入正确格式的日期(ISO)，例如：2009-06-23，1998/01/22 只验证格式，不验证有效性
(7)number:true 必须输入合法的数字(负数，小数)
(8)digits:true 必须输入整数
(9)creditcard: 必须输入合法的信用卡号
(10)equalTo:"#field" 输入值必须和#field相同
(11)accept: 输入拥有合法后缀名的字符串（上传文件的后缀）
(12)maxlength:5 输入长度最多是5的字符串(汉字算一个字符)
(13)minlength:10 输入长度最小是10的字符串(汉字算一个字符)
(14)rangelength:[5,10] 输入长度必须介于 5 和 10 之间的字符串")(汉字算一个字符)
(15)range:[5,10] 输入值必须介于 5 和 10 之间
(16)max:5 输入值不能大于5
(17)min:10 输入值不能小于10
三、默认的提示
messages: {
required: "This field is required.",
remote: "Please fix this field.",
email: "Please enter a valid email address.",
url: "Please enter a valid URL.",
date: "Please enter a valid date.",
dateISO: "Please enter a valid date (ISO).",
dateDE: "Bitte geben Sie ein g眉ltiges Datum ein.",
number: "Please enter a valid number.",
numberDE: "Bitte geben Sie eine Nummer ein.",
digits: "Please enter only digits",
creditcard: "Please enter a valid credit card number.",
equalTo: "Please enter the same value again.",
accept: "Please enter a value with a valid extension.",
maxlength: $.validator.format("Please enter no more than {0} characters."),
minlength: $.validator.format("Please enter at least {0} characters."),
rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
range: $.validator.format("Please enter a value between {0} and {1}."),
max: $.validator.format("Please enter a value less than or equal to {0}."),
min: $.validator.format("Please enter a value greater than or equal to {0}.")
},如需要修改，可在js代码中加入：jQuery.extend(jQuery.validator.messages, {
required: "必选字段",
remote: "请修正该字段",
email: "请输入正确格式的电子邮件",
url: "请输入合法的网址",
date: "请输入合法的日期",
dateISO: "请输入合法的日期 (ISO).",
number: "请输入合法的数字",
digits: "只能输入整数",
creditcard: "请输入合法的信用卡号",
equalTo: "请再次输入相同的值",
accept: "请输入拥有合法后缀名的字符串",
maxlength: jQuery.validator.format("请输入一个长度最多是 {0} 的字符串"),
minlength: jQuery.validator.format("请输入一个长度最少是 {0} 的字符串"),
rangelength: jQuery.validator.format("请输入一个长度介于 {0} 和 {1} 之间的字符串"),
range: jQuery.validator.format("请输入一个介于 {0} 和 {1} 之间的值"),
max: jQuery.validator.format("请输入一个最大为 {0} 的值"),
min: jQuery.validator.format("请输入一个最小为 {0} 的值")
});推荐做法，将此文件放入messages_cn.js中，在页面中引入
<script src="../js/messages_cn.js" type="text/javascript"></script>
四、使用方式
1.将校验规则写到控件中
[html]
1. <script src="../js/jquery.js" type="text/javascript"></script>
2. <script src="../js/jquery.validate.js" type="text/javascript"></script>
3. <script src="./js/jquery.metadata.js" type="text/javascript"></script>$().ready(function() {
4. $("#signupForm").validate();
5. });
6. <form id="signupForm" method="get" action="">
7. <p>
8. <label for="firstname">Firstname</label>
9. <input id="firstname" name="firstname" class="required" />
10. </p>
11. <p>
12. <label for="email">E-Mail</label>
13. <input id="email" name="email" class="required email" />
14. </p>
15. <p>
16. <label for="password">Password</label>
17. <input id="password" name="password" type="password" class="{required:true,minlength:5}" />
18. </p>
19. <p>
20. <label for="confirm_password">确认密码</label>
21. <input id="confirm_password" name="confirm_password" type="password" class="{required:true,minlength:5,equalTo:'#password'}" />
22. </p>
23. <p>
24. <input class="submit" type="submit" value="Submit"/>
25. </p>

</form>使用class="{}"的方式，必须引入包：jquery.metadata.js可以使用如下的方法，修改提示内容：
class="{required:true,minlength:5,messages:{required:'请输入内容'}}"在使用equalTo关键字时，后面的内容必须加上引号，如下代码：
class="{required:true,minlength:5,equalTo:'#password'}"另外一个方式，使用关键字：meta（为了元数据使用其他插件你要包装 你的验证规则 在他们自己的项目中可以用这个特殊的选项）
Tell the validation plugin to look inside a validate-property in metadata for validation rules.
例如：
[html]
1. meta: "validate"
2. <input id="password" name="password" type="password" class="{validate:{required:true,minlength:5}}" />
3. 再有一种方式：
4. $.metadata.setType("attr", "validate");这样可以使用validate="{required:true}"的方式，或者class="required"，但class="{required:true,minlength:5}"将不起作用 2.将校验规则写到代码中
5.
6. $().ready(function() {
7. $("#unionRegForm").validate({
8. rules: {
9. username:{ required:true, rangelength:[6,15] },
10. email:{ required:true, email:true},
11. password:{ required:true, rangelength:[6,15]},
12. password2:{ required:true, rangelength:[6,15], equalTo: "#password"}
13. },
14. messages: {
15. username:{ required:"请输入用户名", rangelength:"用户名长度在6-15位之间"},
16. email:{ required:"请输入Email地址", email:"请输入正确的email地址"},
17. password:{ required:"请输入密码", rangelength:"密码长度在6-15位之间"},
18. password2:{ required:"请输入确认密码", rangelength:"确认密码不能小于6个字符", equalTo:"两次输入密码不一致不一致"}
19. }
20. });
21. });
22. //messages处，如果某个控件没有message，将调用默认的信息
23. <form id="signupForm" method="get" action="">
24. <p>
25. <label for="firstname">Firstname</label>
26. <input id="firstname" name="firstname" />
27. </p>
28. <p>
29. <label for="email">E-Mail</label>
30. <input id="email" name="email" />
31. </p>
32. <p>
33. <label for="password">Password</label>
34. <input id="password" name="password" type="password" />
35. </p>
36. <p>
37. <label for="confirm_password">确认密码</label>
38. <input id="confirm_password" name="confirm_password" type="password" />
39. </p>
40. <p>
41. <input class="submit" type="submit" value="Submit"/>
42. </p>
43. </form>

required:true 必须有值
required:"#aa:checked"表达式的值为真，则需要验证
required:function(){}返回为真，表时需要验证
后边两种常用于，表单中需要同时填或不填的元素
五、常用方法及注意问题
1.用其他方式替代默认的SUBMIT$().ready(function() {
$("#signupForm").validate({
submitHandler:function(form){
alert("submitted");
form.submit();
}
});
});可以设置validate的默认值，写法如下：
$.validator.setDefaults({
submitHandler: function(form) { alert("submitted!");form.submit(); }
});如果想提交表单, 需要使用form.submit()而不要使用$(form).submit()
2.debug，如果这个参数为true，那么表单不会提交，只进行检查，调试时十分方便
$().ready(function() {
$("#signupForm").validate({
debug:true
});
});
如果一个页面中有多个表单，用
$.validator.setDefaults({
debug: true
})
3.ignore：忽略某些元素不验证
ignore: ".ignore"
4.errorPlacement：Callback Default: 把错误信息放在验证的元素后面
指明错误放置的位置，默认情况是：error.appendTo(element.parent());即把错误信息放在验证的元素后面
[html]
1. errorPlacement: function(error, element) {
2. error.appendTo(element.parent());
3. }//示例：
4. <tr>
5. <td class="label"><label id="lfirstname" for="firstname">First Name</label></td>
6. <td class="field"><input id="firstname" name="firstname" type="text" value="" maxlength="100" /></td>
7. <td class="status"></td>
8. </tr>
9. <tr>
10. <td style="padding-right: 5px;">
11. <input id="dateformat_eu" name="dateformat" type="radio" value="0" />
12. <label id="ldateformat_eu" for="dateformat_eu">14/02/07</label>
13. </td>
14. <td style="padding-left: 5px;">
15. <input id="dateformat_am" name="dateformat" type="radio" value="1" />
16. <label id="ldateformat_am" for="dateformat_am">02/14/07</label>
17. </td>
18. <td></td>
19. </tr>
20. <tr>
21. <td class="label"> </td>
22. <td class="field" colspan="2">
23. <div id="termswrap">
24. <input id="terms" type="checkbox" name="terms" />
25. <label id="lterms" for="terms">I have read and accept the Terms of Use.</label>
26. </div>
27. </td>
28. </tr>errorPlacement: function(error, element) {
29. if ( element.is(":radio") )
30. error.appendTo( element.parent().next().next() );
31. else if ( element.is(":checkbox") )
32. error.appendTo ( element.next() );
33. else
34. error.appendTo( element.parent().next() );
35. }

代码的作用是：一般情况下把错误信息显示在<td class="status"></td>中，如果是radio显示在<td></td>中，如果是checkbox显示在内容的后面errorClass：String Default: "error"
指定错误提示的css类名，可以自定义错误提示的样式errorElement：String Default: "label"
用什么标签标记错误，默认的是label你可以改成emerrorContainer：Selector
显示或者隐藏验证信息，可以自动实现有错误信息出现时把容器属性变为显示，无错误时隐藏，用处不大
errorContainer: "#messageBox1, #messageBox2"errorLabelContainer：Selector
把错误信息统一放在一个容器里面。wrapper：String
用什么标签再把上边的errorELement包起来一般这三个属性同时使用，实现在一个容器内显示所有错误提示的功能，并且没有信息时自动隐藏errorContainer: "div.error",
errorLabelContainer: $("#signupForm div.error"),
wrapper: "li" 设置错误提示的样式，可以增加图标显示input.error { border: 1px solid red; }
label.error { background:url("./demo/images/unchecked.gif") no-repeat 0px 0px; padding-left: 16px; padding-bottom: 2px; font-weight: bold; color: #EA5200; }
label.checked { background:url("./demo/images/checked.gif") no-repeat 0px 0px;}success：String,Callback
要验证的元素通过验证后的动作，如果跟一个字符串，会当做一个css类，也可跟一个函数
success: function(label) {
// set &nbsp; as text for IE
label.html("&nbsp;").addClass("checked");
//label.addClass("valid").text("Ok!")
}
添加"valid" 到验证元素, 在CSS中定义的样式<style>label.valid {}</style>
success: "valid" nsubmit： Boolean Default: true
提交时验证. 设置唯false就用其他方法去验证
onfocusout：Boolean Default: true
失去焦点是验证(不包括checkboxes/radio buttons)
onkeyup：Boolean Default: true
在keyup时验证.
onclick：Boolean Default: true
在checkboxes 和 radio 点击时验证
focusInvalid：Boolean Default: true
提交表单后，未通过验证的表单(第一个或提交之前获得焦点的未通过验证的表单)会获得焦点
focusCleanup：Boolean Default: false
如果是true那么当未通过验证的元素获得焦点时，移除错误提示。避免和 focusInvalid 一起用 // 重置表单
$().ready(function() {
var validator = $("#signupForm").validate({
submitHandler:function(form){
alert("submitted");
form.submit();
}
});
$("#reset").click(function() {
validator.resetForm();
});}); remote：URL
使用ajax方式进行验证，默认会提交当前验证的值到远程地址，如果需要提交其他的值，可以使用data选项remote: "check-email.php"remote: {
url: "check-email.php", //后台处理程序
type: "post", //数据发送方式
dataType: "json", //接受数据格式
data: { //要传递的数据
username: function() {
return $("#username").val();
}
}
}
远程地址只能输出 "true" 或 "false"，不能有其它输出 addMethod：name, method, message
自定义验证方法
[html]
1. </pre></div><pre name="code" class="html">// 中文字两个字节
2. jQuery.validator.addMethod("byteRangeLength", function(value, element, param) {
3. var length = value.length;
4. for(var i = 0; i < value.length; i++){
5. if(value.charCodeAt(i) > 127){
6. length++;
7. }
8. }
9. return this.optional(element) || ( length >= param[0] && length <= param[1] );
10. }, $.validator.format("请确保输入的值在{0}-{1}个字节之间(一个中文字算2个字节)"));
11. // 邮政编码验证
12. jQuery.validator.addMethod("isZipCode", function(value, element) {
13. var tel = /^[0-9]{6}$/;
14. return this.optional(element) || (tel.test(value));
15. }, "请正确填写您的邮政编码");
16. radio和checkbox、select的验证radio的required表示必须选中一个
17. <input type="radio" id="gender_male" value="m" name="gender" class="{required:true}" />
18. <input type="radio" id="gender_female" value="f" name="gender"/>checkbox的required表示必须选中
19. <input type="checkbox" class="checkbox" id="agree" name="agree" class="{required:true}" />checkbox的minlength表示必须选中的最小个数,maxlength表示最大的选中个数,rangelength:[2,3]表示选中个数区间
20. <input type="checkbox" class="checkbox" id="spam_email" value="email" name="spam[]" class="{required:true, minlength:2}" />
21. <input type="checkbox" class="checkbox" id="spam_phone" value="phone" name="spam[]" />
22. <input type="checkbox" class="checkbox" id="spam_mail" value="mail" name="spam[]" />
23. select的required表示选中的value不能为空
24. <select id="jungle" name="jungle" title="Please select something!" class="{required:true}">
25. <option value=""></option>
26. <option value="1">Buga</option>
27. <option value="2">Baga</option>
28. <option value="3">Oi</option>
29. </select>
30. select的minlength表示选中的最小个数（可多选的select）,maxlength表示最大的选中个数,rangelength:[2,3]表示选中个数区间
31. <select id="fruit" name="fruit" title="Please select at least two fruits" class="{required:true, minlength:2}" multiple="multiple">
32. <option value="b">Banana</option>
33. <option value="a">Apple</option>
34. <option value="p">Peach</option>
35. <option value="t">Turtle</option>
36. </select>
37. // 手机号码验证
38. jQuery.validator.addMethod("mobile", function(value, element) {
39. var length = value.length;
40. var mobile = /^(((13[0-9]{1})|(15[0-9]{1}))+\d{8})$/
41. return this.optional(element) || (length == 11 && mobile.test(value));
42. }, "手机号码格式错误");
43.
44. // 电话号码验证
45. jQuery.validator.addMethod("phone", function(value, element) {
46. var tel = /^(0[0-9]{2,3}\-)?([2-9][0-9]{6,7})+(\-[0-9]{1,4})?$/;
47. return this.optional(element) || (tel.test(value));
48. }, "电话号码格式错误");
49.
50. // 邮政编码验证
51. jQuery.validator.addMethod("zipCode", function(value, element) {
52. var tel = /^[0-9]{6}$/;
53. return this.optional(element) || (tel.test(value));
54. }, "邮政编码格式错误");
55.
56. // QQ号码验证
57. jQuery.validator.addMethod("qq", function(value, element) {
58. var tel = /^[1-9]\d{4,9}$/;
59. return this.optional(element) || (tel.test(value));
60. }, "qq号码格式错误");
61.
62. // IP地址验证
63. jQuery.validator.addMethod("ip", function(value, element) {
64. var ip = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
65. return this.optional(element) || (ip.test(value) && (RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256));
66. }, "Ip地址格式错误");
67.
68. // 字母和数字的验证
69. jQuery.validator.addMethod("chrnum", function(value, element) {
70. var chrnum = /^([a-zA-Z0-9]+)$/;
71. return this.optional(element) || (chrnum.test(value));
72. }, "只能输入数字和字母(字符A-Z, a-z, 0-9)");
73.
74. // 中文的验证
75. jQuery.validator.addMethod("chinese", function(value, element) {
76. var chinese = /^[\u4e00-\u9fa5]+$/;
77. return this.optional(element) || (chinese.test(value));
78. }, "只能输入中文");
79.
80. // 下拉框验证
81. $.validator.addMethod("selectNone", function(value, element) {
82. return value == "请选择";
83. }, "必须选择一项");
84.
85. // 字节长度验证
86. jQuery.validator.addMethod("byteRangeLength", function(value, element, param) {
87. var length = value.length;
88. for (var i = 0; i < value.length; i++) {
89. if (value.charCodeAt(i) > 127) {
90. length++;
91. }
92. }
93. return this.optional(element) || (length >= param[0] && length <= param[1]);
94. }, $.validator.format("请确保输入的值在{0}-{1}个字节之间(一个中文字算2个字节)"));
